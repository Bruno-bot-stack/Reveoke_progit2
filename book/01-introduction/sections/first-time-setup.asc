[[_first_time]]
=== Configuração Inicial do Git

Agora que tens o Git no teu sistema, deves fazer algumas coisas para personalisar o ambiente do Git.
Tens que fazer isto apenas uma vez por computador e o efeito irá se manter após atualizações.
Também podes mudá-las a qualquer momento executando estes comandos novamente.

O Git vem com uma ferramente chamada `git config` que permite ver e atribuir variáveis de configuração que controlam todos os aspectos de como o Git aparece e opera.(((git commands, config)))
Estas variáveis podem ser armazenadas em três locais diferentes:

1. `/etc/gitconfig`: válido para todos os utilizadores no sistema e todos os teus repositórios.
  Se tu passares a opção `--system` para `git config`, ele lê e escreve neste arquivo.
2. `~/.gitconfig` ou `~/.config/git/config`: Somente para o teu utilizador.
  Tu podes fazer o Git ler e escrever neste arquivo passando a opção `--global`.
3. `config` no diretório Git (ou seja, `.git/config`) de qualquer repositório que tu estejas a usar: específico para este repositório.

Cada nível sobreescreve os valoes no nível anterior, ou seja, valores em `.git/config` prevalecem sobre `/etc/gitconfig`.

No Windows, o Git procura pelo arquivo `.gitconfig` no diretório `$HOME` (`C:\Users\$USER` para a maioria).
Ele também procura por `/etc/gitconfig`, mesmo sendo relativo à raiz do sistema, que é onde quer que tu tenhas instalado o Git no teu sistema.

Se estiveres a usar a versão 2.x ou posterior do Git para Windows, também há um arquivo de configuração de nível de sistema no `C:\Documents and Settings\All Users\Application Data\Git\config` no Windows XP, e em `C:\ProgramData\Git\config` no Windows Vista e mais recentes.
Este arquivo de configuração só pode ser alterado por `git config -f <file>` como administrador.

==== A Tua Identidade

A primeira coisa que tu deves fazer ao instalares o Git é configurar o teu nome de utilizador e endereço de e-mail.
Isto é importante porque cada comprometimento no Git usa esta informação, e ela é imutavelmente carimbada nos comprometimentos que tu começas a criar:

[source,console]
----
$ git config --global user.name "Fulano de Tal"
$ git config --global user.email fulanodetal@exemplo.pt
----

Reiterando, tu precisarás de fazer isto somente uma vez se tiveres a usar a opção `--global`, porque então o Git usará esta informação para qualquer coisa que tu fizeres naquele sistema.
Se quiseres substituir esta informação com nome diferente para um projeto específico, podes executar o comando sem a opção `--global` dentro daquele projeto.

Muitas ferramentas GUI vão te ajudar com isto quando forem usadas pela primeira vez.

==== O Teu Editor

Agora que a tua identidade está configurada, podes escolher o editor de texto padrão que será chamado quando Git precisar que escrevas uma mensagem.
Se não for configurado, o Git usará o editor padrão.
Se tu quiseres usar um editor de texto diferente, como o Emacs, podes fazer o seguinte:

[source,console]
----
$ git config --global core.editor emacs
----

Num sistema Windows, se tu quiseres usar um editor de texto diferente, deves especificar o caminho completo para o arquivo executável.
Isto pode ser diferente dependendo de como o teu editor está empacotado.
No caso do Notepad ++, um editor de programação popular, é provável que tu queiras usar a versão de 32 bits, uma vez que, no momento da escrita, a versão de 64 bits não suporta todos os plug-ins.
Se tu estiveres num sistema Windows de 32 bits ou tiver um editor de 64 bits num sistema de 64 bits, digitarás algo como isto:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

If you have a 32-bit editor on a 64-bit system, the program will be installed in `C:\Program Files (x86)`:

[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[NOTA]
====

Vim, Emacs e Notepad++ são editores de texto populares comumente usados por desenvolvedores em sistemas baseados em Unix como Linux e macOS ou sistema Windows. 

Se não estiveres acostumado com estes editores, precisarás de procurar por instruções de como configurar o teu editor preferido com Git.

====

[ATENÇÃO]
====
Podes achar, se não configurares o teu editor como este, entras num estado realmente confuso quando o Git tenta iniciá-lo.
Um exemplo num sistema Windows pode incluir uma operação Git prematuramente encerrada durante uma edição iniciada pelo Git.
====

==== Testar as Tuas Configurações

Se quiseres testar as tuas configurações, podes usar o comando `git config --list` para listar todas as configurações que o Git conseguir encontrar naquele momento:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Poderás ver que algumas palavras chave apareçem mais de que uma vez, porque Git lê as mesmas chaves de arquivos diferentes (`/etc/gitconfig` e `~/.gitconfig`, por exemplo).
Neste caso, Git usa o último valor para cada chave única que ele vê.

Podes também testar o que o Git tem numa chave específica digitando `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTA]
====
Uma vez que o Git pode ler o mesmo valor de variável de configuração de mais de um arquivo, é possível que tenhas um valor inesperado para um destes valores e tu não sabe por quê.
Em casos como este, podes consultar o Git quanto à _origem_ para este valor, e ele irá dizer-lhe qual arquivo de configuração teve a última palavra ao definir este valor:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/fulanodetal/.gitconfig	false
----
====
