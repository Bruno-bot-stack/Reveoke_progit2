=== Git in Bash

(((bash)))(((tab completion, bash)))(((shell prompts, bash)))
Se és um utilizador do Bash, podes aceder alguns dos recursos do teu shell para tornares a tua experiência com o Git muito mais amigável.
O Git realmente vem com plugins para vários shells, mas não está ativado por padrão.

Primeiro, precisas de obter uma cópia do arquivo `contrib/completion/git-completion.bash` fora do código fonte Git.
Copia-o para algum lugar útil, como o teu diretório pessoal, e adiciona isto ao `.bashrc`:

[source,console]
-----
. ~/git-completion.bash
-----

Quando isto for feito, muda o teu diretório para um repositório Git e digita:

[source,console]
----
$ git chec<tab>
----

... e Bash será completado automaticamente para `git checkout`.
Isto funciona com todos os subcomandos do Git, parâmetros da linha de comando e controles remotos e nomes de referência quando apropriado.

Também é útil personalizar o teu prompt para mostrar informações sobre o repositório Git do diretório atual.
Isto pode ser tão simples ou complexo quanto tu quiseres, mas geralmente existem algumas informações importantes que a maioria das pessoas quer, como o ramo atual e o status do diretório de trabalho.
Para adicioná-los ao teu prompt, basta copiar o arquivo `contrib/completion/git-prompt.sh` do repositório de origem do Git para o diretório inicial, adiciona algo como este ao `.bashrc`:

[source,console]
-----
. ~/git-prompt.sh
export GIT_PS1_SHOWDIRTYSTATE=1
export PS1='\w$(__git_ps1 " (%s)")\$ '
-----

O `\w' significa imprimir o diretório de trabalho atual, o `\$` imprime a parte `$` do prompt e `__git_ps1 " (%s)"`chama a função fornecida por `git-prompt.sh` com um argumento de formatação.
Agora, o teu prompt bash ficará assim quando estiver em algum lugar dentro de um projeto controlado por Git:

.Customized `bash` prompt.
image::images/git-bash.png[Customized `bash` prompt.]

Ambos os scripts vêm com documentação útil; Dá uma olhadela no conteúdo de `git-completion.bash` e `git-prompt.sh` para obteres mais informações.
