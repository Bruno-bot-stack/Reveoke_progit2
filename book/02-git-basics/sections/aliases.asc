[[_git_aliases]]
=== Alias Git

(((aliases)))
Antes de terminar este capítulo no Git básico, há apenas uma pequena dica que pode tornar a tua experiência Git mais simples, fácil e familiar: alias.
Nós não nos referiremos a eles ou assumiremos que tu os tenhas usado mais tarde no livro, mas provavelmente deves saber como usá-los.

O Git não deduz automaticamente o teu comando se tu digitares parcialmente.
Se não quiseres digitar todo o texto de cada um dos comandos Git, podes configurar facilmente um alias para cada comando usando `git config`.(((git commands, config)))
Aqui estão alguns exemplos que tu podes configurar:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Isto significa que, por exemplo, em vez de digitares `git commit`, basta digitares `git ci`.
À medida que tu usas o Git, provavelmente também usarás outros comandos com freqüência; não hesites em criar novos alias.

Esta técnica também pode ser muito útil na criação de comandos que achas que deveriam existir.
Por exemplo, para corrigir o problema de usabilidade que tu encontraste com o desmarcado de um arquivo, podes adicionar o teu próprio alias inesgotável ao Git:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Isso faz com que os dois comandos seguintes sejam equivalentes:

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

Isto parece um pouco mais claro.
Também é comum adicionar um comando `last`, como este:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Desta forma, tu podes ver o último commit facilmente:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Autor: Josh Goebel <dreamer3@example.com>
Data:   Terça Aosto 26 19:48:51 2008 +0800

    teste para a cabeça atual

    Assinado: Scott Chacon <schacon@example.com>
----

Como podes dizer, o Git simplesmente substitui o novo comando para o que quer que o teu alias sirva.
No entanto, talvez queiras executar um comando externo, em vez de um subcomando Git.
Nesse caso, inicias o comando com um caractere `!`.
Isto é útil se tu escreveres as tuas próprias ferramentas que funcionam com um repositório Git.
Podemos demonstrar por aliasing `git visual` para executar` gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
